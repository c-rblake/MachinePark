@page "/machineoverview"

<h1 class="page-title">All Machines</h1>

@if (State == null)
{
    <p><em>Loading...</em></p>
}
else
{

    @*SEND THE PARAMETER DOWN TO CHILD COMPONENT. IN THIS CASE THE PARAMETER IS A FUNCTION => EVENT to listen for.*@

    <AddMachine Add="AddMachine" />

    <button @onclick="() => Add()" class="btn btn-danger"><i class="fa fa-add"></i></button>




    <table class="table">
        <thead>
            <tr>
                <th>Machine ID</th>
                <th>Name</th>
                <th>Status</th>
                <th>Log</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var machine in State.Machines)
            {
                <tr>
                    <td>@machine.MachineId</td>
                    <td>@machine.Name</td>
                    <td class="@(machine.Status == Shared.Status.Online? "running":"")">@machine.Status</td>
                    <td>@machine.Log[0]</td>
                    <td>
                        <a href="@($"MachineDetails/{machine.Name}")" class="btn btn-primary table-btn">
                            @*<a href="@($"MachineDetails/{machine.MachineId}")" class="btn btn-primary table-btn">*@
                            <i class="fa fa-info-circle"></i>
                        </a>
                        <button @onclick="() => Remove(machine)" class="btn btn-danger"><i class="fa fa-remove"></i></button>
                    </td>
                </tr>
            }
        </tbody>
    </table>



    @*<Blazor.FlexGrid.Components.GridView DataAdapter="@Machines" PageSize="1"></Blazor.FlexGrid.Components.GridView>*@

    @code{
        private void Remove(Machine machine)
        {
            //Todo remove backend. Not for debugging though.
            State.Machines.Remove(machine);
        }
        private void Add()
        {
            State.Machines.Add(new Machine { Name = "Add MACHINE", MachineId = Guid.NewGuid(), Status = Shared.Status.Offline, Log = new List<string>() });
        }

        private void AddMachine(string text) //Todo Machine machine. Or use a Form since it is a complex type.
        {
            if (!string.IsNullOrWhiteSpace(text))
                State.Machines.Add(new Machine { Name = text, MachineId = Guid.NewGuid(), Status = Shared.Status.Offline, Log = new List<string>() });
        }
    }
}